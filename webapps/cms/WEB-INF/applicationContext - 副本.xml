<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!-- enable autowire -->
    <context:annotation-config />

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
        
    <!-- DAO配置 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!--bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName"    value="${mysql_driver}"/>
        <property name="url"        value="${mysql_url}"/>
        <property name="username"   value="${mysql_username}"/>
        <property name="password"   value="${mysql_password}"/>
    </bean-->
    <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName"    value="${ora_driver}"/>
        <property name="url"        value="${ora_url}"/>
        <property name="username"   value="${ora_username}"/>
        <property name="password"   value="${ora_password}"/>

       <!-- Connection Pooling Info -->
        <property name="maxActive" value="20"/>
        <property name="minIdle" value="5"/>
        <property name="defaultAutoCommit" value="false"/>
        <property name="maxWait" value="30000"/>

        <!-- 每2分钟运行一次空闲连接回收器  -->
        <property name="timeBetweenEvictionRunsMillis" value="120000"/>
        <!--池中的连接空闲10分钟后被回收,默认值是30分钟。 -->
        <property name="minEvictableIdleTimeMillis" value="600000"/>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除-->
        <!--property name="testWhileIdle " value="true"/-->

        <!--优化 ：验证连接是否可用，使用的SQL语句-->
        <property name="validationQuery" value="SELECT 1 FROM DUAL"/>
        <!--  是否自动回收超时连接-->
        <property name="removeAbandoned" value="true"/>
        <!--  超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="10"/>
    </bean>

    <bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="Oracle">oracle</prop>
                <prop key="MySQL">mysql</prop>
            </props>
        </property>
    </bean>
   
	<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
        <property name="properties" ref="vendorProperties" />
    </bean>
        
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource" />
        <property name="typeAliasesPackage" value="com.bizwink.po" />
        <property name="databaseIdProvider" ref="databaseIdProvider" />
        <!-- <property name="configLocation" value="/WEB-INF/mybatis-config.xml"/> -->
        <!--
          该属性用来指定MyBatis的XML配置文件路径,跟Spring整合时，编写MyBatis映射文件的目的无非是配置一下typeAlias、setting之类的
          元素。不用在其中指定数据源，或者事务处理方式。就算配置了也会被忽略。因为这些都是使用Spring中的配置
          。当然如果你不打算添加typeAlias 之类的设置的话，你连MyBatis的配置文件都不用写，更不用配置这个属性了
          -->

        <!--<property name="mapperLocations" value="src/UserMapper.xml"/>-->
        <!-- 该配置文件用来指定Mapper映射文件的位置 ，如果映射文件与相应的接口同名，且在同一路径下，那么可以不配置该选项-->
    </bean>
    <!--
        注册Mapper方式一 <bean id="userMapper"
        class="org.mybatis.spring.mapper.MapperFactoryBean"> <property
        name="mapperInterface"
        value="org.hyn.maper.UserMapper"/> <property
        name="sqlSessionFactory" ref="sqlSessionFactory"/> </bean>
    -->
    <!-- 注册Mapper方式二：也可不指定特定mapper，而使用自动扫描包的方式来注册各种Mapper ，配置如下：-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:basePackage="com.bizwink.persistence"/>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource" />
    </bean>

    <!-- enable component scanning (beware that this does not enable mapper scanning!) -->
    <context:component-scan base-package="com.bizwink.service" />    
	
		<!--修改用户登陆状态定时任务,默认用户30分钟之内没有操作，认为用户离线 -->
    <bean id="UserStatusJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="updateLoginUserStatus" />
        <property name="targetMethod">
            <value>work</value>
        </property>
        <property name="concurrent" value="false" />
		<property name="arguments" value="5"/>
    </bean>

	<!-- 任务调度计时器，进行定时设置。CronTriggerBean能进行非常精确的定时设置 -->
    <bean id="UserLoginStatus" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
        <property name="jobDetail" ref="UserStatusJob" />
        <!-- cron表达式 -->
        <property name="cronExpression">
            <!--   0 0 */2 * * ? 每两小时、整点触发 -->
            <!--   0 0/2 * * * ? 每两分钟  -->
            <!--   0/5 * * * * ? 每五秒钟  -->
            <!--   0 15 10 * * ? 每天Y分X点触发  -->
            <value>0 0/30 * * * ?</value>
        </property>
    </bean>
    
	    <!--     修改用户登陆状态定时任务 -->
    <bean id="JobPublish" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="jobPublishService" />
        <property name="targetMethod">
            <value>doPublish</value>
        </property>
        <property name="concurrent" value="false" />
		<property name="arguments" value="C:\\projects\\webbuilder\\webapps\\cms"/>
    </bean>

	<!-- 任务调度计时器，进行定时设置。CronTriggerBean能进行非常精确的定时设置 -->
    <bean id="PublishServer" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" >
        <property name="jobDetail" ref="JobPublish" />
        <!-- cron表达式 -->
        <property name="cronExpression">
            <!--   0 0 */2 * * ? 每两小时、整点触发 -->
            <!--   0 0/2 * * * ? 每两分钟  -->
            <!--   0/5 * * * * ? 每五秒钟  -->
            <!--   0 15 10 * * ? 每天Y分X点触发  -->
            <value>0 0/2 * * * ?</value>
        </property>
    </bean>


	<!-- 调度任务触发器，启动定时任务-->
    <bean autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" destroy-method="stop">
        <property name="triggers">
            <list>
                <!--ref bean="UserLoginStatus" /-->
				<ref bean="PublishServer" />
            </list>
        </property>
    </bean>
</beans>
