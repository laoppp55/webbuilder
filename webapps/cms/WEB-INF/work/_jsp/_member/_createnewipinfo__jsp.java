/*
 * JSP generated by Resin-4.0.58 (built Fri, 24 Aug 2018 01:23:14 PDT)
 */

package _jsp._member;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.bizwink.cms.security.*;
import com.bizwink.cms.sitesetting.*;
import com.bizwink.cms.util.*;

public class _createnewipinfo__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=utf-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
    Auth authToken = SessionUtil.getUserAuthorization(request, response, session);
    if (authToken == null)
    {
        response.sendRedirect( "../login.jsp?url=member/createnewsite.jsp" );
        return;
    }
    if (!SecurityCheck.hasPermission(authToken,54))
    {
        request.setAttribute("message","\u65e0\u7cfb\u7edf\u7ba1\u7406\u7684\u6743\u9650");
        response.sendRedirect("editMember.jsp?user="+authToken.getUserID());
        return;
    }

    int ID = ParamUtil.getIntParameter(request, "ID", 0);
    int siteID = ParamUtil.getIntParameter(request, "siteID", 0);
    int pubway = ParamUtil.getIntParameter(request, "pubway", -1);
    int status = ParamUtil.getIntParameter(request, "status", 0);
    String siteIP = ParamUtil.getParameter(request, "ip");
    String siteName = ParamUtil.getParameter(request, "sitename");
    String docroot = ParamUtil.getParameter(request, "root");
    String ftpuser = ParamUtil.getParameter(request, "ftp_username");
    String ftppasswd = ParamUtil.getParameter(request, "ftp_passwd");
    boolean doCreate = ParamUtil.getBooleanParameter(request, "doCreate");
    boolean doUpdate = ParamUtil.getBooleanParameter(request, "doUpdate");

    if (siteIP == null) siteIP = "localhost";
    IFtpSetManager ftpMgr = FtpSetting.getInstance();

    int ftptype = 0;
    if (pubway == 2) {     //pubway=2\u8868\u793a\u662fSFTP\u53d1\u5e03
        pubway = 0;        //\u56de\u590dpubway=0,\u8868\u793a\u662f\u91c7\u7528FTP\u534f\u8bae\u8fdb\u884c\u4fe1\u606f\u53d1\u5e03
        ftptype = 1;       //\u8bbe\u7f6eFTP\u534f\u8bae\u662f\u4fe1\u606f\u52a0\u5bc6\u7684SFTP\u534f\u8bae
    } else if (pubway == 0) {
        pubway = 0;        //\u56de\u590dpubway=0,\u8868\u793a\u662f\u91c7\u7528FTP\u534f\u8bae\u8fdb\u884c\u4fe1\u606f\u53d1\u5e03
        ftptype = 0;       //\u8bbe\u7f6eFTP\u534f\u8bae\u662f\u4fe1\u606f\u975e\u52a0\u5bc6\u7684FTP\u534f\u8bae
    } else {
        pubway = 1;        //\u672c\u5730\u4fe1\u606f\u53d1\u5e03\uff0cftptype\u8bbe\u7f6e\u7684\u503c\u65e0\u5f71\u54cd
    }

    System.out.println("ftptype===" + ftptype);

    if (doCreate) {
        FtpInfo ftpinfo = new FtpInfo();
        ftpinfo.setSiteid(siteID);
        ftpinfo.setSiteName(siteName);
        ftpinfo.setDocpath(docroot);
        ftpinfo.setFtppwd(ftppasswd);
        ftpinfo.setFtpuser(ftpuser);
        ftpinfo.setIp(siteIP);
        ftpinfo.setFtptype(ftptype);
        ftpinfo.setPublishway(pubway);
        ftpinfo.setStatus(status);

        ftpMgr.create(ftpinfo);
        //\u5c06\u6587\u7ae0\u5217\u8868\u56fe\u6807\u53d1\u5e03\u5230WEB\u670d\u52a1\u5668
        //regMgr.copyIconToWEB(authToken.getUserID(),siteID,application.getRealPath("/"));
    }

    if (doUpdate) {
        FtpInfo ftpinfo = new FtpInfo();
        ftpinfo.setID(ID);
        ftpinfo.setSiteName(siteName);
        ftpinfo.setIp(siteIP);
        ftpinfo.setDocpath(docroot);
        ftpinfo.setFtpuser(ftpuser);
        ftpinfo.setFtptype(ftptype);
        ftpinfo.setFtppwd(ftppasswd);
        ftpinfo.setStatus(status);
        ftpinfo.setPublishway(pubway);
        ftpMgr.update(ftpinfo);
    }

    out.write(_jsp_string1, 0, _jsp_string1.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 6165118203484593848L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("member/createnewipinfo.jsp"), 2842311558693002670L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string1;
  private final static char []_jsp_string0;
  static {
    _jsp_string1 = "\r\n\r\n<script language=\"javascript\">\r\n    opener.history.go(0);\r\n    window.close();\r\n</script>\r\n".toCharArray();
    _jsp_string0 = "\r\n".toCharArray();
  }
}
