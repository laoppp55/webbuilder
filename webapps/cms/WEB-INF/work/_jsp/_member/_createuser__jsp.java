/*
 * JSP generated by Resin-4.0.58 (built Fri, 24 Aug 2018 01:23:14 PDT)
 */

package _jsp._member;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.util.*;
import com.bizwink.cms.security.*;
import com.bizwink.cms.util.*;
import java.math.BigDecimal;
import com.bizwink.service.OrganizationService;
import org.springframework.context.ApplicationContext;
import com.bizwink.util.SpringInit;
import com.bizwink.po.Companyinfo;
import com.bizwink.po.Department;
import java.util.Map;
import com.bizwink.util.JSON;
import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.bizwink.cms.util.SessionUtil;
import com.bizwink.cms.security.Auth;

public class _createuser__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=gbk");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
    Auth authToken = SessionUtil.getUserAuthorization(request, response, session);
    if (authToken == null) {
        response.sendRedirect(response.encodeRedirectURL("/manage/index.jsp?msg=\u7eef\u8364\u7cba\u74d2\u546e\u6902\u951b\u5c83\ue1ec\u95b2\u5d86\u67ca\u9427\u5a5a\u6ab0!"));
        return;
    }

    out.write(_jsp_string1, 0, _jsp_string1.length);
    
    if (!SecurityCheck.hasPermission(authToken, 54)) {
        response.sendRedirect("../error.jsp?message=\u65e0\u7ba1\u7406\u7528\u6237\u7684\u6743\u9650");
        return;
    }

    boolean error = false;
    int errcode = 0;
    int siteID = authToken.getSiteID();
    String username = authToken.getUserID();
    String userid    = ParamUtil.getParameter(request,"userid");
    String password  = ParamUtil.getParameter(request,"passwd");
    String realname  = ParamUtil.getParameter(request,"realname");
    String mphone = ParamUtil.getParameter(request,"mphone");
    String phone = ParamUtil.getParameter(request,"phone");
    String email = ParamUtil.getParameter(request,"email");
    int orgid = ParamUtil.getIntParameter(request,"orgid",0);
    String rightids  = ParamUtil.getParameter(request,"rightids");
    boolean doCreate = ParamUtil.getBooleanParameter(request,"doCreate");

    ApplicationContext appContext = SpringInit.getApplicationContext();
    if (doCreate) {
        if (userid == null || password == null) error = true;
    }

    if (!error && doCreate) {
        IUserManager userMgr = UserPeer.getInstance();
        try {
            List<Companyinfo> companyinfos = new ArrayList<Companyinfo>();
            List<Department> departments = new ArrayList<Department>();
            if (appContext!=null) {
                OrganizationService organizationService = (OrganizationService)appContext.getBean("organizationService");
                departments = organizationService.getADepartmentByOrgid(BigDecimal.valueOf(siteID),BigDecimal.valueOf(orgid));
                companyinfos = organizationService.getMainCompaniesByOrgid(BigDecimal.valueOf(siteID),BigDecimal.valueOf(orgid));
            }
            String[] right_ids = rightids.split(",");
            List<String> rightList = new ArrayList<>();
            for(int ii=0; ii<right_ids.length; ii++) {
                rightList.add(right_ids[ii]);
            }
            boolean IsExit = userMgr.existUser(userid,siteID);
            if (!IsExit) {
                User newUser = new User();
                newUser.setID(userid);
                newUser.setSiteid(siteID);
                newUser.setPassword(password);
                newUser.setNickName(realname);
                newUser.setMobilePhone(mphone);
                newUser.setPhone(phone);
                newUser.setEmail(email);
                newUser.setRightList(rightList);
                newUser.setOrgid(orgid);
                if (departments.size()>=1) {
                    newUser.setDepartment(departments.get(0).getCNAME());
                    newUser.setDeptid(departments.get(0).getID().intValue());
                }else {
                    newUser.setDepartment("");
                    newUser.setDeptid(0);
                }
                if (companyinfos.size()>=1) {
                    newUser.setCompany(companyinfos.get(0).getCOMPANYNAME());
                    newUser.setCompanyid(companyinfos.get(0).getID().intValue());
                }else {
                    newUser.setCompany("");
                    newUser.setCompanyid(0);
                }
                errcode = userMgr.create(newUser,username);
            }
        } catch (Exception e) {
            errcode = -2;
            e.printStackTrace();
        }
    }

    Map data = new HashMap();
    data.put("ERRCODE",errcode);
    Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create();
    String jsondata = gson.toJson(data);
    System.out.println(jsondata);
    JSON.setPrintWriter(response,jsondata,"utf-8");

  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 6165118203484593848L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("member/createUser.jsp"), 4595601795879367267L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("include/auth.jsp"), 2058711971559820489L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  private final static char []_jsp_string1;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
  }
}
