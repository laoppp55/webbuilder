/*
 * JSP generated by Resin-4.0.58 (built Fri, 24 Aug 2018 01:23:14 PDT)
 */

package _jsp._member;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.bizwink.util.SpringInit;
import org.springframework.context.ApplicationContext;
import com.bizwink.cms.util.SessionUtil;
import com.bizwink.cms.security.Auth;
import com.bizwink.service.UsersService;
import com.bizwink.po.Users;
import java.util.List;
import java.math.BigDecimal;
import com.bizwink.util.filter;
import java.util.ArrayList;
import com.bizwink.util.JSON;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.bizwink.util.ParamUtil;
import com.bizwink.service.OrganizationService;
import com.bizwink.po.Organization;
import java.util.HashMap;
import java.util.Map;
import com.bizwink.vo.VoUser;
import com.bizwink.service.DeptService;
import com.bizwink.service.CompanyService;
import com.bizwink.po.Companyinfo;
import com.bizwink.po.Department;
import com.bizwink.cms.security.IRightsManager;
import com.bizwink.cms.security.RightsPeer;
import com.bizwink.cms.security.Rights;

public class _usersmanager__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=UTF-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
    request.setCharacterEncoding("utf-8");
    Auth authToken = SessionUtil.getUserAuthorization(request, response, session);
    if (authToken == null)
    {
        response.sendRedirect(response.encodeRedirectURL("/webbuilder/index.jsp?msg=\u7cfb\u7edf\u8d85\u65f6\uff0c\u8bf7\u91cd\u65b0\u767b\u9646!"));
        return;
    }

    int siteid = authToken.getSiteID();
    int orgid = ParamUtil.getIntParameter(request,"orgid",0);
    int currentPage = ParamUtil.getIntParameter(request,"pageno",1);
    boolean doSearchFlag = ParamUtil.getBooleanParameter(request,"searchFlag");
    int flag = ParamUtil.getIntParameter(request,"flag",0);
    int ascdesc = ParamUtil.getIntParameter(request,"ascdesc",0);
    String keyword = ParamUtil.getParameter(request,"keyword");

    //System.out.println("orgid==" + orgid);
    //System.out.println("siteid==" + siteid);
    //System.out.println("currentPage==" + currentPage);
    //System.out.println("doSearchFlag==" + doSearchFlag);
    //System.out.println("flag==" + flag);
    //System.out.println("ascdesc==" + ascdesc);
    //System.out.println("keyword==" + keyword);

    int range = 20;
    int userCount = 0;
    List<Users> users = new ArrayList<Users>();
    DeptService deptService = null;
    CompanyService companyService = null;
    ApplicationContext appContext = SpringInit.getApplicationContext();
    if (appContext!=null) {
        deptService = (DeptService)appContext.getBean("deptService");
        companyService = (CompanyService)appContext.getBean("companyService");
        UsersService usersService = (UsersService)appContext.getBean("usersService");
        OrganizationService organizationService = (OrganizationService)appContext.getBean("organizationService");
        Organization organization = organizationService.getAOrganization(BigDecimal.valueOf(orgid));
        if (organization.getPARENT().intValue()==0) {
            if (!doSearchFlag) {
                userCount = usersService.getTotalUsersCount(BigDecimal.valueOf(siteid));
                users = usersService.getUsersByCustomer(BigDecimal.valueOf(siteid), BigDecimal.valueOf((currentPage - 1) * range + 1), BigDecimal.valueOf(currentPage * range));
            } else {
                //\u67e5\u8be2\u7528\u6237\u4fe1\u606f
                userCount = usersService.searchUsersCountByKeyword(keyword,BigDecimal.valueOf(siteid),null);
                users = usersService.searchUsersByKeyword(keyword,BigDecimal.valueOf(siteid), null,BigDecimal.valueOf((currentPage - 1) * range + 1), BigDecimal.valueOf(currentPage * range));
            }
        }else {
            List<Organization> organizations = organizationService.getSubOrgtreeByParant(BigDecimal.valueOf(siteid), BigDecimal.valueOf(orgid));
            List<Integer> orgids = new ArrayList<Integer>();
            for (int ii = 0; ii < organizations.size(); ii++) {
                orgids.add(organizations.get(ii).getID().intValue());
            }
            if (!doSearchFlag) {
                userCount = usersService.getUsersCountByParentOrgID(BigDecimal.valueOf(siteid), orgids);
                users = usersService.getUsersByParentOrgID(BigDecimal.valueOf(siteid), orgids, BigDecimal.valueOf((currentPage - 1) * range + 1), BigDecimal.valueOf(currentPage * range));
            } else {
                //\u67e5\u8be2\u7528\u6237\u4fe1\u606f
                userCount = usersService.searchUsersCountByKeyword(keyword,BigDecimal.valueOf(siteid),orgids);
                users = usersService.searchUsersByKeyword(keyword,BigDecimal.valueOf(siteid), orgids, BigDecimal.valueOf((currentPage - 1) * range + 1), BigDecimal.valueOf(currentPage * range));
            }
        }
    }

    IRightsManager rightsMgr = RightsPeer.getInstance();
    List<VoUser> voUsers = new ArrayList<VoUser>();
    for(int ii=0;ii<users.size();ii++) {
        Users user = users.get(ii);
        VoUser voUser = new VoUser();
        voUser.setID(user.getID());
        voUser.setORGID(user.getORGID());
        Companyinfo companyinfo = companyService.getCompanyinfoByCompid(user.getCOMPANYID());
        voUser.setCOMPANYID(user.getCOMPANYID());
        if (companyinfo!=null) voUser.setCOMPANY(companyinfo.getCOMPANYNAME());
        Department department = deptService.getDepartmentByDeptID(user.getDEPTID());
        voUser.setDEPTID(user.getDEPTID());
        if (department!=null) voUser.setDEPARTMENT(department.getCNAME());
        voUser.setNICKNAME(user.getNICKNAME());
        voUser.setUSERID(user.getUSERID());
        voUser.setCREATEDATE(user.getCREATEDATE());
        voUser.setEMAIL(user.getEMAIL());
        voUser.setADDRESS(user.getADDRESS());
        voUser.setMPHONE(user.getMPHONE());
        voUser.setSEX(user.getSEX());
        //\u5224\u65ad\u662f\u5426\u662f\u7ad9\u70b9\u7ba1\u7406\u5458\u8d26\u53f7\uff0csitemanagerflag==1\u7ad9\u70b9\u7ba1\u7406\u5458 sitemanagerflag=0\u666e\u901a\u7f16\u8f91
        int sitemanagerflag = 0;
        List<Rights> rightsList = rightsMgr.getRights(user.getUSERID());
        for(int jj=0; jj<rightsList.size(); jj++) {
            Rights rights = rightsList.get(jj);
            if (rights.getRightID()==54) {
                sitemanagerflag = 1;
                break;
            }
        }
        voUser.setSITEMANAGERFLAG(sitemanagerflag);
        voUser.setUNLOGIN(user.getUNLOGIN());
        voUsers.add(voUser);
    }

    Map data = new HashMap();
    data.put("USERS",voUsers);
    data.put("PAGENO",currentPage);
    data.put("USERCOUNT",userCount);
    data.put("RANGE",range);
    data.put("ORGID",orgid);
    data.put("SEARCHFLAG",doSearchFlag);
    data.put("FLAG",flag);
    data.put("ASCDESC",ascdesc);

    Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create();
    String jsondata = gson.toJson(data);
    //System.out.println(jsondata);
    JSON.setPrintWriter(response,jsondata,"utf-8");

  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 6165118203484593848L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("member/usersManager.jsp"), -8037884531013091146L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
  }
}
