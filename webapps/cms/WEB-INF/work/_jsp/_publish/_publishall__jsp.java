/*
 * JSP generated by Resin-4.0.58 (built Fri, 24 Aug 2018 01:23:14 PDT)
 */

package _jsp._publish;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.util.*;
import com.bizwink.cms.publish.*;
import com.bizwink.po.*;
import com.bizwink.cms.security.*;
import com.bizwink.cms.orderArticleListManager.*;
import com.bizwink.cms.util.*;
import com.bizwink.util.JSON;
import java.net.URLDecoder;
import java.math.BigDecimal;
import com.bizwink.service.ArticleService;
import org.springframework.context.ApplicationContext;
import com.bizwink.util.SpringInit;

public class _publishall__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=utf-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
    Auth authToken = SessionUtil.getUserAuthorization(request, response, session);
    if (authToken == null) {
        response.sendRedirect(response.encodeRedirectURL("../login.jsp?msg=\u7cfb\u7edf\u8d85\u65f6\uff0c\u8bf7\u91cd\u65b0\u767b\u9646!"));
        return;
    }

    String username = authToken.getUserID();
    String sitename = authToken.getSitename();
    int siteid = authToken.getSiteID();
    int samsiteid = authToken.getSamSiteid();
    int sitetype = authToken.getSitetype();
    int imgflag = authToken.getImgSaveFlag();
    int option = authToken.getPublishFlag();
    String appPath = application.getRealPath("/");

    int columnID = ParamUtil.getIntParameter(request, "column", 0);
    int range = ParamUtil.getIntParameter(request, "range", 20);
    int flag = ParamUtil.getIntParameter(request, "flag", 0);
    int ascdesc = ParamUtil.getIntParameter(request, "ascdesc", 0);
    boolean doSearch = ParamUtil.getBooleanParameter(request, "doSearch");
    String maintitle = ParamUtil.getParameter(request,"title");
    if (maintitle!=null) maintitle = filter.excludeHTMLCode(URLDecoder.decode(maintitle,"utf-8"));
    String vicetitle = ParamUtil.getParameter(request,"vicetitle");
    if (vicetitle!=null) vicetitle = filter.excludeHTMLCode(URLDecoder.decode(vicetitle,"utf-8"));
    String author = ParamUtil.getParameter(request,"author");
    if (author!=null) author = filter.excludeHTMLCode(URLDecoder.decode(author,"utf-8"));
    String source = ParamUtil.getParameter(request,"source");
    if (source!=null) source = filter.excludeHTMLCode(URLDecoder.decode(source,"utf-8"));
    String spubdate = ParamUtil.getParameter(request,"spubdate");
    if (spubdate!=null) spubdate = filter.excludeHTMLCode(URLDecoder.decode(spubdate,"utf-8"));
    String epubdate = ParamUtil.getParameter(request,"epubdate");
    if (epubdate!=null) epubdate = filter.excludeHTMLCode(URLDecoder.decode(epubdate,"utf-8"));

    if (SecurityCheck.hasPermission(authToken, 54) || SecurityCheck.hasPermission(authToken, 50)) {
        username = null;
    }

    int retcode = 1;
    List<com.bizwink.po.Article> articleList = new ArrayList<>();
    int totalCount=0;
    ArticleService articleService = null;
    ApplicationContext appContext = SpringInit.getApplicationContext();
    if (appContext!=null) {
        articleService = (ArticleService) appContext.getBean("articleService");
        if (!doSearch) {
            totalCount = articleService.getArticlesCountByColumnidsForPublish(BigDecimal.valueOf(siteid), BigDecimal.valueOf(columnID),null,null);
        } else {
            totalCount = articleService.getSearchArticlesCountForPublish(BigDecimal.valueOf(siteid), BigDecimal.valueOf(columnID),null,maintitle,vicetitle,author,source, spubdate,epubdate,null, null);
        }
    }

    int count = 0;
    int pageno = 0;
    //\u6bcf\u6b21\u53d1\u5e03range\u7bc7\u6587\u7ae0\uff0c\u8ba1\u7b97\u9700\u8981\u53d1\u5e03\u7684\u6b21\u6570
    int extra = totalCount % range;
    if (extra>0)
        count = totalCount/range + 1;
    else
        count = totalCount/range;

    System.out.println("doSearch:" + doSearch);
    System.out.println("flag:" + flag);
    System.out.println("ascdesc:" + ascdesc);
    System.out.println("range:" + range);
    System.out.println("column:" + columnID);

    System.out.println("maintitle:" + maintitle);
    System.out.println("vicetitle:" + vicetitle);
    System.out.println("author:" + author);
    System.out.println("source:" + source);
    System.out.println("spubdate:" + spubdate);
    System.out.println("epubdate:" + epubdate);

    System.out.println("totalCount===" + totalCount);
    System.out.println("count===" + count);

    response.setHeader("Content-Type","application/x-javascript");
    if (articleService != null) {
        IPublishManager publishMgr = PublishPeer.getInstance();
        int publishArticleCount = 0;
        for (int ii = 0; ii < count; ii++) {
            if (!doSearch) {
                articleList = articleService.getArticlesInPageByColumnidsForPublish(username, BigDecimal.valueOf(siteid), BigDecimal.valueOf(columnID), null, BigDecimal.valueOf(100), BigDecimal.valueOf(ii * range), BigDecimal.valueOf((ii+1) * range), flag, ascdesc);
            } else {
                articleList = articleService.getSearchArticlesInPageForPublish(username, BigDecimal.valueOf(siteid), BigDecimal.valueOf(columnID), BigDecimal.valueOf(ii * range), BigDecimal.valueOf((ii + 1) * range), null, maintitle, vicetitle, author, source, spubdate, epubdate, BigDecimal.valueOf(100), null, BigDecimal.valueOf(flag), BigDecimal.valueOf(ascdesc));
            }
            System.out.println("ii===" + ii + "==" + articleList.size() + "==" + count);
            for(int jj=0; jj<articleList.size(); jj++) {
                Article article = (Article)articleList.get(jj);
                columnID = article.getCOLUMNID().intValue();
                int articleid = article.getID().intValue();
                boolean isown = (article.getIsown().intValue()==1)?true:false;
                retcode = publishMgr.CreateArticlePage(articleid,columnID,siteid,sitetype,samsiteid,appPath,sitename,username,imgflag,option,isown,0);
                System.out.println("publish article:" + article.getMAINTITLE());
            }

            publishArticleCount = publishArticleCount + articleList.size();
            out.println(publishArticleCount + "/" + totalCount);
            out.flush();
            Thread.currentThread().sleep(500);
        }
    }

    System.out.println("complete publiahs article");

    /*IPublishManager publishMgr = PublishPeer.getInstance();
    IColumnManager columnMgr = ColumnPeer.getInstance();
    IOrderArticleListManager orderArticleMgr = orderArticleListPeer.getInstance();
    List publish_article_list = orderArticleMgr.getPublishArticlesInColumn(columnID,siteid);

    for (int i = 0; i < publish_article_list.size(); i++) {
        Article article = (Article)publish_article_list.get(i);
        int articleid = article.getID();
        if (articleid > 0) {
            boolean isTemplate = article.getIsTemplate();
            if (isTemplate) {
                columnID = article.getColumnID();
                int type = article.getIsArticleTemplate();
                if (type == 0 || type == 4) {        //\u53d1\u5e03\u680f\u76ee\u9875\u9762
                    retcode = publishMgr.CreateColPage(columnID, siteid,sitetype,samsiteid, appPath, sitename, username, imgflag, option, articleid);

                    //\u5982\u679c\u9700\u8981\u53d1\u5e03RSS\uff0c\u53d1\u5e03RSS
                    Column column = columnMgr.getColumn(columnID);
                    if (column.getRss() == 1) {
                        RssMaker rm = new RssMaker();
                        rm.createRss(siteid, columnID, column, appPath, username, sitename);
                    }
                } else if (type == 2 || type == 5) {        //\u53d1\u5e03\u9996\u9875
                    retcode = publishMgr.createHomePage(siteid,sitetype,samsiteid, appPath, sitename, username, imgflag, option, articleid);
                } else if (type == 3 || type == 6) {        //\u53d1\u5e03\u4e13\u9898\u9875\u9762\u548c\u667a\u80fd\u624b\u673a\u680f\u76ee\u9875\u9762
                    retcode = publishMgr.CreateColPage(columnID, siteid,sitetype,samsiteid, appPath, sitename, username, imgflag, option, articleid);
                }
            } else {       //\u53d1\u5e03\u6587\u7ae0
                columnID = article.getColumnID();
                boolean isown = article.isIsown();
                retcode = publishMgr.CreateArticlePage(articleid, siteid,sitetype,samsiteid, appPath, sitename, username, imgflag, option, isown, columnID);
            }
        }

        if (count<20)
            count = count + 1;
        else {
            out.println(count);
            out.flush();
            count = 0;
        }
    }

    String jsonData = null;
    if (retcode == 0)
        jsonData =  "{\"result\":\"true\"}";
    else
        jsonData = "{\"result\":\"false\"}";
    JSON.setPrintWriter(response, jsonData,"utf-8");
    */

  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 6165118203484593848L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("publish/publishall.jsp"), 7850530510318150094L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
  }
}
