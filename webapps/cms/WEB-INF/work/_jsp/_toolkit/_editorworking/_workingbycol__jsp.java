/*
 * JSP generated by Resin-4.0.58 (built Fri, 24 Aug 2018 01:23:14 PDT)
 */

package _jsp._toolkit._editorworking;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.bizwink.cms.security.*;
import com.bizwink.cms.util.*;
import java.util.List;
import java.util.ArrayList;
import com.bizwink.log.*;

public class _workingbycol__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=utf-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
    Auth authToken = SessionUtil.getUserAuthorization(request,response,session);
    if (authToken == null)
    {
        response.sendRedirect(response.encodeRedirectURL("../../login.jsp?msg=\u7cfb\u7edf\u8d85\u65f6\uff0c\u8bf7\u91cd\u65b0\u767b\u9646!"));
        return;
    }

    String userid = authToken.getUserID();
    String deptid = authToken.getDepartment();
    String baseDir= application.getRealPath("/");
    int siteid = authToken.getSiteID();

    ILogManager logManager = LogPeer.getInstance();
    LogColumnTree logColumnTree = logManager.getLogColumnTree(authToken.getSiteID());
    PublishArticleCountOfColumn[] columnTreeNode = logColumnTree.getPublishArticleCountOfColumns();

    //\u9996\u9875\u9ed8\u8ba4\u7edf\u8ba1\u4e00\u4e2a\u5b63\u5ea6\u5185\u5404\u4e2a\u680f\u76ee\u7684\u4fe1\u606f\u53d1\u5e03\u91cf
    logColumnTree = logManager.getWorkingByCol(siteid,logColumnTree);
    columnTreeNode = logColumnTree.getPublishArticleCountOfColumns();

    List<PublishArticleCountOfColumn> thelist = new ArrayList<>();
    thelist.add(columnTreeNode[0]);

    StringBuffer rowHtml = new StringBuffer();
    List<NodeHTML> nodeHTMLList = new ArrayList<>();
    for(int ii=0; ii<columnTreeNode.length;ii++) {
        if (columnTreeNode[ii]!=null) {
            if (columnTreeNode[ii].getLevel() == 1) {
                //\u627e\u51fa\u5f53\u524d\u8fd9\u4e2a\u7b2c\u4e00\u7ea7\u680f\u76ee\u7684\u6240\u6709\u5b50\u680f\u76ee
                PublishArticleCountOfColumn[] secondSubNodes = new PublishArticleCountOfColumn[columnTreeNode[ii].getSubcolnum()];
                int subnodenum = 0;
                for(int jj=0;jj<columnTreeNode.length;jj++) {
                    if (columnTreeNode[jj]!=null) {
                        if (columnTreeNode[jj].getPcolumnid() == columnTreeNode[ii].getColumnid()){
                            secondSubNodes[subnodenum] = columnTreeNode[jj];
                            subnodenum = subnodenum + 1;
                        }
                    }
                    //\u5982\u679c\u627e\u51fa\u7684\u5b50\u8282\u70b9\u6570\u5df2\u7ecf\u7b49\u4e8e\u5f53\u524d\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\uff0c\u505c\u6b62\u67e5\u627e
                    if (subnodenum == columnTreeNode[ii].getSubcolnum()) break;
                }

                //\u83b7\u53d6\u7b2c\u4e8c\u7ea7\u680f\u76ee\u7684\u6240\u6709\u5b50\u680f\u76ee
                PublishArticleCountOfColumn[][] threeSubNodes = new PublishArticleCountOfColumn[secondSubNodes.length][];
                for(int jj=0;jj<secondSubNodes.length;jj++) {
                    threeSubNodes[jj] = new PublishArticleCountOfColumn[secondSubNodes[jj].getSubcolnum()];
                    subnodenum = 0;
                    for(int kk=0;kk<columnTreeNode.length;kk++) {
                        if (columnTreeNode[kk]!=null) {
                            if (columnTreeNode[kk].getPcolumnid() == secondSubNodes[jj].getColumnid()){
                                threeSubNodes[jj][subnodenum] = columnTreeNode[kk];
                                subnodenum = subnodenum + 1;
                            }
                        }
                        //\u5982\u679c\u627e\u51fa\u7684\u5b50\u8282\u70b9\u6570\u5df2\u7ecf\u7b49\u4e8e\u5f53\u524d\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\uff0c\u505c\u6b62\u67e5\u627e
                        if (subnodenum == secondSubNodes[jj].getSubcolnum()) {
                            break;
                        }
                    }
                }

                rowHtml = new StringBuffer();
                NodeHTML nodeHTML = new NodeHTML();
                nodeHTML.setColumnid(columnTreeNode[ii].getColumnid());

                /*
                //\u4e24\u5c42\u680f\u76ee\u7edf\u8ba1\u8868
                if (secondSubNodes.length > 0)
                    rowHtml.append("<tr><td rowspan=\"" + columnTreeNode[ii].getSubcolnum() + "\">" + columnTreeNode[ii].getColname() + "</td><td>" + secondSubNodes[0].getColname() + "</td></tr>\r\n");
                else
                    rowHtml.append("<tr><td rowspan=\"" + columnTreeNode[ii].getSubcolnum() + "\">" + columnTreeNode[ii].getColname() + "</td><td>&nbsp;</td></tr>\r\n");

                for (int jj = 1; jj < columnTreeNode[ii].getSubcolnum(); jj++) {
                    rowHtml.append("<tr><td>" + secondSubNodes[jj].getColname() + "</td></tr>\r\n");
                }*/

                //\u4e09\u5c42\u680f\u76ee\u7edf\u8ba1\u8868
                if (secondSubNodes.length > 0) {
                    int firstSpanRows = 0;
                    for(int jj=0;jj<secondSubNodes.length;jj++) {
                        if (secondSubNodes[jj].getSubcolnum()>0)
                            firstSpanRows = firstSpanRows + secondSubNodes[jj].getSubcolnum();
                        else
                            firstSpanRows = firstSpanRows + 1;
                    }
                    rowHtml.append("<tr><td rowspan=\"" + firstSpanRows + "\">" + columnTreeNode[ii].getColname() + "</td><td rowspan=\"" + secondSubNodes[0].getSubcolnum() + "\">" + secondSubNodes[0].getColname() + "</td><td>" + threeSubNodes[0][0].getColname() + "</td></tr>\r\n");
                }else
                    rowHtml.append("<tr><td rowspan=\"" + columnTreeNode[ii].getSubcolnum() + "\">" + columnTreeNode[ii].getColname() + "</td><td>&nbsp;</td><td>&nbsp;</td></tr>\r\n");

                for(int k=0;k<secondSubNodes.length;k++) {
                    for(int l=0;l<secondSubNodes[k].getSubcolnum();l++) {
                        rowHtml.append("<tr><td>" + threeSubNodes[k][l].getColname() + "</td></tr>\r\n");
                    }
                    //rowHtml.append("<tr><td rowspan=\"" + secondSubNodes[k].getSubcolnum() + "\">" + secondSubNodes[k].getColname() + "</td><td>" + threeSubNodes[k][0].getColname() + "</td></tr>\r\n");
                }

                nodeHTML.setRowHtml(rowHtml.toString());
                //System.out.println(nodeHTML.getRowHtml());
                nodeHTMLList.add(nodeHTML);
            }
        }
    }

    String html = "<html>\r\n" +
            "<head><title>test</title></head>\r\n" +
            "</body>\r\n" +
            "<table border=1>\r\n";
    for(int ii=0;ii<nodeHTMLList.size();ii++) {
        NodeHTML nodeHTML = nodeHTMLList.get(ii);
        int colid = nodeHTML.getColumnid();
        html = html + nodeHTML.getRowHtml();
    }
    html = html + "</table>\r\n" +
            "</body>\r\n" +
            "</html>";

    FileUtil.writeTextFile(html,"c:\\data\\11.html");


    //out.println(tableHtml);

    out.write(_jsp_string1, 0, _jsp_string1.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 6165118203484593848L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("toolkit/editorworking/workingByCol.jsp"), 627743293481589567L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  private final static char []_jsp_string1;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
  }
}
