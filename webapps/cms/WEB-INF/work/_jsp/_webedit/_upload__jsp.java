/*
 * JSP generated by Resin-4.0.58 (built Fri, 24 Aug 2018 01:23:14 PDT)
 */

package _jsp._webedit;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.bizwink.cms.security.*;
import com.jspsmart.upload.*;
import com.bizwink.cms.publish.*;
import com.bizwink.cms.util.*;

public class _upload__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=utf-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
  Auth authToken = SessionUtil.getUserAuthorization(request,response,session);
  if (authToken == null) {
    response.sendRedirect(response.encodeRedirectURL("../login.jsp?msg=\u7cfb\u7edf\u8d85\u65f6\uff0c\u8bf7\u91cd\u65b0\u767b\u9646!"));
    return;
  }

  boolean success = false;
  int siteID = authToken.getSiteID();
  String username = authToken.getUserID();
  String siteName = authToken.getSitename();
  String oldFilePath = "";

  SmartUpload mySmartUpload = new SmartUpload();
  mySmartUpload.initialize(this.getServletConfig(), request, response);

  try {
    mySmartUpload.setCharset("utf-8");
    mySmartUpload.upload();
    String path = mySmartUpload.getRequest().getParameter("path");
    oldFilePath = path;

    System.out.println("old file path==" + oldFilePath);

    File tempFile = mySmartUpload.getFiles().getFile(0);
    if (tempFile == null) {
      response.sendRedirect("webmain.jsp?filePath=" + oldFilePath + "&msg=\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff0c\u8bf7\u91cd\u8bd5\uff01");
      return;
    }

    String dirName = path.substring(path.indexOf(siteName)+siteName.length(),path.lastIndexOf("/")+1);
    String unzip = mySmartUpload.getRequest().getParameter("unzip");
    path = StringUtil.replace(path, "/", java.io.File.separator);
    java.io.File file = new java.io.File(path);
    if (!file.exists()) file.mkdirs();
    String fileName = tempFile.getFileName();

    //\u4fdd\u5b58\u6587\u4ef6
    mySmartUpload.save(path);
    mySmartUpload = null;

    //\u5982\u679c\u662f\u538b\u7f29\u5305\u5e76\u4e14\u9700\u8981\u89e3\u538b
    String extName = fileName.substring(fileName.lastIndexOf(".")+1).toLowerCase();

    System.out.println("extname==" + extName);

    if (unzip.equals("1") && (extName.equals("zip"))) {
      UnZip unzipHandle = new UnZip();
      unzipHandle.UnZipAnywhere(path + fileName, path, siteName, siteID, 0);
      System.out.println("path==" + (path + fileName));
      file = new java.io.File(path + fileName);
      file.delete();
    } else{    //\u53d1\u5e03\u5230WEB\u670d\u52a1\u5668
      IPublishManager publishMgr = PublishPeer.getInstance();
      publishMgr.publish(username, path+fileName, siteID, dirName, 0);
    }
    success = true;
  } catch (Exception e) {
    e.printStackTrace();
  }

  if (success)
    response.sendRedirect("webmain.jsp?filePath=" + oldFilePath + "&msg=\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff01");
  else
    response.sendRedirect("webmain.jsp?filePath=" + oldFilePath + "&msg=\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff0c\u8bf7\u91cd\u8bd5\uff01");

  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 6165118203484593848L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("webedit/upload.jsp"), -8857524269493178340L, false);
    _caucho_depends.add(depend);
    loader.addDependency(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\r\n\r\n".toCharArray();
  }
}
